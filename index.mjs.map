{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isProbability } from '@stdlib/assert-is-probability';\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number';\nimport kurtosis from '@stdlib/stats-base-dists-negative-binomial-kurtosis';\nimport mean from '@stdlib/stats-base-dists-negative-binomial-mean';\nimport mode from '@stdlib/stats-base-dists-negative-binomial-mode';\nimport skewness from '@stdlib/stats-base-dists-negative-binomial-skewness';\nimport stdev from '@stdlib/stats-base-dists-negative-binomial-stdev';\nimport variance from '@stdlib/stats-base-dists-negative-binomial-variance';\nimport cdf from '@stdlib/stats-base-dists-negative-binomial-cdf';\nimport logpmf from '@stdlib/stats-base-dists-negative-binomial-logpmf';\nimport mgf from '@stdlib/stats-base-dists-negative-binomial-mgf';\nimport pmf from '@stdlib/stats-base-dists-negative-binomial-pmf';\nimport quantile from '@stdlib/stats-base-dists-negative-binomial-quantile';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction negativeBinomialCDF( x ) {\n\treturn cdf( x, this.r, this.p );\n}\n\n/**\n* Evaluates the natural logarithm of the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n*/\nfunction negativeBinomialLogPMF( x ) {\n\treturn logpmf( x, this.r, this.p );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction negativeBinomialMGF( t ) {\n\treturn mgf( t, this.r, this.p );\n}\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n*/\nfunction negativeBinomialPMF( x ) {\n\treturn pmf( x, this.r, this.p );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction negativeBinomialQuantile( p ) {\n\treturn quantile( p, this.r, this.p );\n}\n\n\n// MAIN //\n\n/**\n* Negative binomial distribution constructor.\n*\n* @constructor\n* @param {PositiveNumber} [r=1.0] - number of successes until experiment is stopped\n* @param {Probability} [p=0.5] - success probability\n* @throws {TypeError} `r` must be a positive number\n* @throws {TypeError} `p` must be a number between 0 and 1\n* @returns {NegativeBinomial} distribution instance\n*\n* @example\n* var nbinomial = new NegativeBinomial( 5.0, 0.1 );\n*\n* var y = nbinomial.cdf( 10.0 );\n* // returns ~0.013\n*\n* var v = nbinomial.mode;\n* // returns 36.0\n*/\nfunction NegativeBinomial() {\n\tvar r;\n\tvar p;\n\tif ( !(this instanceof NegativeBinomial) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new NegativeBinomial();\n\t\t}\n\t\treturn new NegativeBinomial( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tr = arguments[ 0 ];\n\t\tp = arguments[ 1 ];\n\t\tif ( !isPositive( r ) ) {\n\t\t\tthrow new TypeError( format( '15b99,Hm', r ) );\n\t\t}\n\t\tif ( !isProbability( p ) ) {\n\t\t\tthrow new TypeError( format( '15b8m,Ha', p ) );\n\t\t}\n\t} else {\n\t\tr = 1.0;\n\t\tp = 0.5;\n\t}\n\tdefineProperty( this, 'r', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn r;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( '15b8k,HE', value ) );\n\t\t\t}\n\t\t\tr = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'p', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn p;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isProbability( value ) ) {\n\t\t\t\tthrow new TypeError( format( '15b8o,Hb', value ) );\n\t\t\t}\n\t\t\tp = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Negative binomial distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof NegativeBinomial.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var nbinomial = new NegativeBinomial( 12.0, 0.4 );\n*\n* var v = nbinomial.kurtosis;\n* // returns ~0.522\n*/\nsetReadOnlyAccessor( NegativeBinomial.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.r, this.p );\n});\n\n/**\n* Negative binomial distribution expected value.\n*\n* @name mean\n* @memberof NegativeBinomial.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var nbinomial = new NegativeBinomial( 12.0, 0.4 );\n*\n* var v = nbinomial.mean;\n* // returns ~18.0\n*/\nsetReadOnlyAccessor( NegativeBinomial.prototype, 'mean', function get() {\n\treturn mean( this.r, this.p );\n});\n\n/**\n* Negative binomial distribution mode.\n*\n* @name mode\n* @memberof NegativeBinomial.prototype\n* @type {NonNegativeInteger}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var nbinomial = new NegativeBinomial( 12.0, 0.4 );\n*\n* var v = nbinomial.mode;\n* // returns 16.0\n*/\nsetReadOnlyAccessor( NegativeBinomial.prototype, 'mode', function get() {\n\treturn mode( this.r, this.p );\n});\n\n/**\n* Negative binomial distribution skewness.\n*\n* @name skewness\n* @memberof NegativeBinomial.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var nbinomial = new NegativeBinomial( 12.0, 0.4 );\n*\n* var v = nbinomial.skewness;\n* // returns ~0.596\n*/\nsetReadOnlyAccessor( NegativeBinomial.prototype, 'skewness', function get() {\n\treturn skewness( this.r, this.p );\n});\n\n/**\n* Negative binomial distribution standard deviation.\n*\n* @name stdev\n* @memberof NegativeBinomial.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var nbinomial = new NegativeBinomial( 12.0, 0.4 );\n*\n* var v = nbinomial.stdev;\n* // returns ~6.708\n*/\nsetReadOnlyAccessor( NegativeBinomial.prototype, 'stdev', function get() {\n\treturn stdev( this.r, this.p );\n});\n\n/**\n* Negative binomial distribution variance.\n*\n* @name variance\n* @memberof NegativeBinomial.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var nbinomial = new NegativeBinomial( 12.0, 0.4 );\n*\n* var v = nbinomial.variance;\n* // returns ~45.0\n*/\nsetReadOnlyAccessor( NegativeBinomial.prototype, 'variance', function get() {\n\treturn variance( this.r, this.p );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof NegativeBinomial.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var nbinomial = new NegativeBinomial( 4.0, 0.2 );\n*\n* var v = nbinomial.cdf( 3.0 );\n* // returns ~0.033\n*/\nsetReadOnly( NegativeBinomial.prototype, 'cdf', negativeBinomialCDF );\n\n/**\n* Evaluates the natural logarithm of the probability mass function (PMF).\n*\n* @name logpmf\n* @memberof NegativeBinomial.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var nbinomial = new NegativeBinomial( 4.0, 0.2 );\n*\n* var v = nbinomial.logpmf( 9.0 );\n* // returns ~-3.052\n*/\nsetReadOnly( NegativeBinomial.prototype, 'logpmf', negativeBinomialLogPMF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof NegativeBinomial.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var nbinomial = new NegativeBinomial( 4.0, 0.2 );\n*\n* var v = nbinomial.mgf( 0.1 );\n* // returns ~1.66\n*/\nsetReadOnly( NegativeBinomial.prototype, 'mgf', negativeBinomialMGF );\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @name pmf\n* @memberof NegativeBinomial.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var nbinomial = new NegativeBinomial( 4.0, 0.2 );\n*\n* var v = nbinomial.pmf( 9.0 );\n* // returns ~0.047\n*/\nsetReadOnly( NegativeBinomial.prototype, 'pmf', negativeBinomialPMF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof NegativeBinomial.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var nbinomial = new NegativeBinomial( 4.0, 0.2 );\n*\n* var v = nbinomial.quantile( 0.5 );\n* // returns 15.0\n*/\nsetReadOnly( NegativeBinomial.prototype, 'quantile', negativeBinomialQuantile );\n\n\n// EXPORTS //\n\nexport default NegativeBinomial;\n"],"names":["NegativeBinomial","r","p","this","arguments","length","isPositive","TypeError","format","isProbability","defineProperty","configurable","enumerable","get","set","value","setReadOnlyAccessor","prototype","kurtosis","mean","mode","skewness","stdev","variance","setReadOnly","x","cdf","logpmf","t","mgf","pmf","quantile"],"mappings":";;i1DA0HA,SAASA,IACR,IAAIC,EACAC,EACJ,KAAOC,gBAAgBH,GACtB,OAA0B,IAArBI,UAAUC,OACP,IAAIL,EAEL,IAAIA,EAAkBI,UAAW,GAAKA,UAAW,IAEzD,GAAKA,UAAUC,OAAS,CAGvB,GADAH,EAAIE,UAAW,IACTE,EAFNL,EAAIG,UAAW,IAGd,MAAM,IAAIG,UAAWC,EAAQ,WAAYP,IAE1C,IAAMQ,EAAeP,GACpB,MAAM,IAAIK,UAAWC,EAAQ,WAAYN,GAE5C,MACED,EAAI,EACJC,EAAI,GA4BL,OA1BAQ,EAAgBP,KAAM,IAAK,CAC1BQ,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOZ,CACP,EACDa,IAAO,SAAcC,GACpB,IAAMT,EAAYS,GACjB,MAAM,IAAIR,UAAWC,EAAQ,WAAYO,IAE1Cd,EAAIc,CACJ,IAEFL,EAAgBP,KAAM,IAAK,CAC1BQ,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOX,CACP,EACDY,IAAO,SAAcC,GACpB,IAAMN,EAAeM,GACpB,MAAM,IAAIR,UAAWC,EAAQ,WAAYO,IAE1Cb,EAAIa,CACJ,IAEKZ,IACR,CAgBAa,EAAqBhB,EAAiBiB,UAAW,YAAY,WAC5D,OAAOC,EAAUf,KAAKF,EAAGE,KAAKD,EAC/B,IAgBAc,EAAqBhB,EAAiBiB,UAAW,QAAQ,WACxD,OAAOE,EAAMhB,KAAKF,EAAGE,KAAKD,EAC3B,IAgBAc,EAAqBhB,EAAiBiB,UAAW,QAAQ,WACxD,OAAOG,EAAMjB,KAAKF,EAAGE,KAAKD,EAC3B,IAgBAc,EAAqBhB,EAAiBiB,UAAW,YAAY,WAC5D,OAAOI,EAAUlB,KAAKF,EAAGE,KAAKD,EAC/B,IAgBAc,EAAqBhB,EAAiBiB,UAAW,SAAS,WACzD,OAAOK,EAAOnB,KAAKF,EAAGE,KAAKD,EAC5B,IAgBAc,EAAqBhB,EAAiBiB,UAAW,YAAY,WAC5D,OAAOM,EAAUpB,KAAKF,EAAGE,KAAKD,EAC/B,IAkBAsB,EAAaxB,EAAiBiB,UAAW,OArPzC,SAA8BQ,GAC7B,OAAOC,EAAKD,EAAGtB,KAAKF,EAAGE,KAAKD,EAC7B,IAqQAsB,EAAaxB,EAAiBiB,UAAW,UA5PzC,SAAiCQ,GAChC,OAAOE,EAAQF,EAAGtB,KAAKF,EAAGE,KAAKD,EAChC,IA4QAsB,EAAaxB,EAAiBiB,UAAW,OAnQzC,SAA8BW,GAC7B,OAAOC,EAAKD,EAAGzB,KAAKF,EAAGE,KAAKD,EAC7B,IAmRAsB,EAAaxB,EAAiBiB,UAAW,OA1QzC,SAA8BQ,GAC7B,OAAOK,EAAKL,EAAGtB,KAAKF,EAAGE,KAAKD,EAC7B,IA0RAsB,EAAaxB,EAAiBiB,UAAW,YAjRzC,SAAmCf,GAClC,OAAO6B,EAAU7B,EAAGC,KAAKF,EAAGE,KAAKD,EAClC"}